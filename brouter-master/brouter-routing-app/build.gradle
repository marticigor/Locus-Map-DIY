import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "btools.routingapp"

        versionCode 45
        versionName project.version

        resValue('string', 'app_version', defaultConfig.versionName)
        setProperty("archivesBaseName","BRouterApp." + defaultConfig.versionName)

        minSdkVersion 14
    }

    sourceSets.main.assets.srcDirs += new File(project.buildDir, 'assets')

    if(project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            // this uses a file  ~/.gradle/gradle.properties
            // with content:
            // RELEASE_STORE_FILE={path to your keystore}
            // RELEASE_STORE_PASSWORD=*****
            // RELEASE_KEY_ALIAS=*****
            // RELEASE_KEY_PASSWORD=*****
            //
            release {
               // enable signingConfig in buildTypes to get a signed apk file
               storeFile file(RELEASE_STORE_FILE)
               storePassword RELEASE_STORE_PASSWORD
               keyAlias RELEASE_KEY_ALIAS
               keyPassword RELEASE_KEY_PASSWORD

               // Optional, specify signing versions used
               v1SigningEnabled true
               v2SigningEnabled true

           }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            if(project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false //added this line to the build.gradle under the /android/app/build.gradle
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    flavorDimensions "api"
    productFlavors {
        api19 {
            dimension "api"

            targetSdkVersion 19
        }
        api30 {
            dimension "api"

            targetSdkVersion 30
        }
    }

    applicationVariants.all {
        variant -> tasks["merge${variant.name.capitalize()}Assets"].dependsOn(generateProfilesZip)
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.3.1'

    implementation project(':brouter-mapaccess')
    implementation project(':brouter-core')
    implementation project(':brouter-expressions')
    implementation project(':brouter-util')

}

task generateProfiles(type: Exec) {
    commandLine = "../misc/scripts/generate_profile_variants.sh"
}

task generateProfilesZip(type: Zip) {
    if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
        logger.warn("Note: On Windows run script '../misc/scripts/generate_profile_variants.sh' manually to include all profiles")
    }
    else {
        dependsOn generateProfiles
    }
    archiveFileName = "profiles2.zip"
    from "../misc/profiles2"
    exclude "all.brf"
    exclude "car-traffic_analysis.brf"
    exclude "car-vario.brf"
    exclude "softaccess.brf"
    destinationDirectory = layout.buildDirectory.dir('assets')
}
